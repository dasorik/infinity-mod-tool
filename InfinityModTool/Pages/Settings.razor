@page "/Settings"
@inject InfinityModTool.Services.ModService modService;

@using InfinityModFramework.Enums;
@using InfinityModFramework.Common;

<h1>Settings</h1>

<hr />

<div class="settings-container">
    <div class="settings-row">
        <label for="setting-steampath">Steam Installation Path</label>
        <div class="settings-options">
            <input type="text" id="setting-steampath" class="form-control" @bind="@SteamInstallationPath" />

            @if (steamPathValidation.IsError)
            {
                <span class="validation-error">* @steamPathValidation.Message</span>
            }
        </div>
    </div>

    @*<div class="settings-row">
        <label for="setting-steampath">Enable Modding Tools</label>
        <div class="settings-options checkbox">
            <input type="checkbox" id="setting-enablemodtools" @bind="@modToolsEnabled" />
        </div>
    </div>*@
</div>

<hr />

<button @onclick="@SaveSettings" disabled="@(!saveEnabled)" class="btn btn-primary">Save</button>

@code {
    private bool saveEnabled = true;
    private bool modToolsEnabled;
    private string steamInstallationPath;

    private ValidationResponse steamPathValidation;

    string SteamInstallationPath
    {
        get => steamInstallationPath;
        set
        {
            steamInstallationPath = value;
            ValidateSettings();
        }
    }


    protected override void OnInitialized()
    {
        SteamInstallationPath = modService.Settings.SteamInstallationPath;
        ValidateSettings();
    }

    void ValidateSettings()
    {
        steamPathValidation = ValidateSteamInstallationPath();
        var enableSave = !steamPathValidation.IsError;

        saveEnabled = enableSave;
    }

    ValidationResponse ValidateSteamInstallationPath()
    {
        if (string.IsNullOrEmpty(steamInstallationPath))
            return new ValidationResponse(ValidationSeverity.None);

        if (!System.IO.Directory.Exists(steamInstallationPath))
            return new ValidationResponse(ValidationSeverity.Error, "The provided path is not a valid Disney Infinity 3.0 installation folder");

        if (!System.IO.File.Exists(System.IO.Path.Combine(steamInstallationPath, "DisneyInfinity3.exe"))
            || !System.IO.Directory.Exists(System.IO.Path.Combine(steamInstallationPath, "assets", "presentation")))
            return new ValidationResponse(ValidationSeverity.Error, "The provided path is not a valid Disney Infinity 3.0 installation folder");

        return new ValidationResponse(ValidationSeverity.None);
    }

    void SaveSettings()
    {
        modService.Settings.SteamInstallationPath = steamInstallationPath;
        modService.Settings.ModdingToolsEnabled = modToolsEnabled;
        modService.SaveSettings();
    }
}