@page "/"
@page "/mods"
@page "/mods/{category}"
@inject InfinityModTool.Services.ModService modService;

@using InfinityModTool.Utilities;


@if (showLoadingIcon)
{
    <LoadingScreen></LoadingScreen>
}

@if (confirmConfig?.CanShow ?? false)
{
    <PopupConfirm Type="@confirmConfig.level" Title="@confirmConfig.title" Message="@confirmConfig.message" ConfirmedChanged="async (confirmed) => { confirmConfig.Hide(); if (confirmed) await confirmConfig.confirmAction?.Invoke(); }"></PopupConfirm>
}

@if (replaceConfig?.CanShow ?? false)
{
    <PopupConfirmReplace Type="@replaceConfig.level" Title="@replaceConfig.title" Message="@replaceConfig.message" ConfirmedPressed="async (id) => { replaceConfig.Hide(); await replaceConfig.confirmAction?.Invoke(id); }" CancelPressed="() => replaceConfig = null" Options="@modService.GetAvailableReplacementCharacters(installContext.ModID)"></PopupConfirmReplace>
}

@if (alertConfig?.CanShow ?? false)
{
    <PopupAlert Type="@alertConfig.level" Title="@alertConfig.title" Message="@alertConfig.message" OnDismissed="() => alertConfig.Hide()"></PopupAlert>
}

@if (!string.IsNullOrEmpty(warningMessage))
{
    <BannerAlert Type="Warning" Message="@warningMessage"></BannerAlert>
}

@if (mods.Count() == 0)
{
    <h1 class="missing">No mod packs could be found</h1>
}

@foreach (var mod in mods)
{
    <CharacterButton IDName="@mod.ModID" DisplayName="@mod.DisplayName" DisplayImage="@mod.DisplayImageBase64" DisplayColor="@mod.DisplayColor" Icon="@modService.GetModIcon(mod.ModID)" Installed="@modService.IsModInstalled(mod.ModID)" OnClick="@SelectMod"></CharacterButton>
}

@code {
    [Parameter] public string category { get; set; }

    bool showLoadingIcon = false;
    ConfirmationDialogConfig confirmConfig = null;
    ConfirmationDialogConfig<string> replaceConfig = null;
    AlertDialogConfig alertConfig = null;

    bool install = false;
    bool requiresReplacement = false;
    InfinityModTool.Data.ModInstallationData installContext;

    string warningMessage = null;
    string alertMessage = null;

    IEnumerable<InfinityModTool.Data.BaseModConfiguration> mods = new InfinityModTool.Data.BaseModConfiguration[] { };

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(modService.Settings.SteamInstallationPath))
            warningMessage = "Steam installation path has not been set, please set this via the settings tab";

        mods = modService.GetModsForCategory(category);
    }

    void SelectMod(string modID)
    {
        if (string.IsNullOrEmpty(modService.Settings.SteamInstallationPath))
        {
            ShowAlertDialog(
                title: null,
                message: "Steam installation path has not been set, please set this in 'Settings'",
                level: AlertLevel.Info
            );

            return;
        }

        var modData = modService.GetMod(modID);
        install = !modService.IsModInstalled(modID);
        installContext = new Data.ModInstallationData() { ModID = modData.ModID, ModCategory = modData.ModCategory };

        if (modData.ModCategory == "Character")
            SelectCharacterMod(modData as Data.CharacterModConfiguration);
        else
            ShowInstallConfirmationDialog();
    }

    void SelectCharacterMod(Data.CharacterModConfiguration modData)
    {
        requiresReplacement = modData?.ReplaceCharacter ?? false;

        if (requiresReplacement && install)
            ShowReplaceConfirmationDialog();
        else
            ShowInstallConfirmationDialog();
    }

    void ShowInstallConfirmationDialog()
    {
        confirmConfig = new ConfirmationDialogConfig()
        {
            title = GetInstallMessage(),
            message = "This will modify your Disney Infinity 3.0 game installation",
            level = AlertLevel.Warning,
            confirmAction = () => InstallUninstall(installContext)
        };

        confirmConfig.Show();
    }

    void ShowReplaceConfirmationDialog()
    {
        replaceConfig = new ConfirmationDialogConfig<string>()
        {
            title = GetInstallMessage(),
            message = "Please select a character below to replace, This will modify your Disney Infinity 3.0 game installation",
            level = AlertLevel.Warning,
            confirmAction = (id) => InstallUninstall(id, installContext)
        };

        replaceConfig.Show();
    }

    void ShowAlertDialog(string title, string message, AlertLevel level)
    {
        alertConfig = new AlertDialogConfig()
        {
            title = title,
            message = message,
            level = level
        };

        alertConfig.Show();
    }

    async Task InstallUninstall(string selectedCharacterID, Data.ModInstallationData modification)
    {
        modification.Parameters.Add("ReplacementCharacter", selectedCharacterID);
        await InstallUninstall(modification);
    }

    async Task InstallUninstall(Data.ModInstallationData modification)
    {
        showLoadingIcon = true;

        ModUtility.InstallInfo installStatus;

        if (install)
            installStatus = await modService.InstallCharacterMod(modification);
        else
            installStatus = await modService.UninstallMod(modification.ModID);

        switch (installStatus.status)
        {
            case ModUtility.InstallationStatus.Error:
                ShowAlertDialog(
                    title: "Oops, something went wrong!",
                    message: "Something went wrong during mod installation. All mods have been uninstalled, and your game has been restored",
                    level: AlertLevel.Error
                );
                break;
            case ModUtility.InstallationStatus.Conflict:
                var conflictingMods = installStatus.conflicts.Select(m => modService.GetMod(m).DisplayName);
                ShowAlertDialog(
                    title: "Mod conflict detected",
                    message: $"The mod being installed conflicts with the following installed mods, and has not been installed: {string.Join(", ", conflictingMods)}",
                    level: AlertLevel.Error
                );
                break;
        }

        showLoadingIcon = false;
    }

    string GetInstallMessage()
    {
        return install ? "Install Mod?" : "Uninstall Mod?";
    }
}