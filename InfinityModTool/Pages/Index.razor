@page "/"
@page "/mods"
@page "/mods/{category}"

@using System.IO;
@using InfinityModEngine.Utilities;
@using InfinityModEngine.Models;
@using InfinityModEngine.Enums; 
@using InfinityModTool.Models;

@inject InfinityModTool.Services.ModService modService;
@inject Tewr.Blazor.FileReader.IFileReaderService fileReaderService;


@if (showLoadingIcon)
{
    <LoadingScreen></LoadingScreen>
}

@if (confirmConfig?.CanShow ?? false)
{
    <PopupConfirm Type="@confirmConfig.level" Title="@confirmConfig.title" Message="@confirmConfig.message" ConfirmedChanged="async (confirmed) => { confirmConfig.Hide(); if (confirmed) await confirmConfig.confirmAction?.Invoke(); }"></PopupConfirm>
}

@if (alertConfig?.CanShow ?? false)
{
    <PopupAlert Type="@alertConfig.level" Title="@alertConfig.title" Message="@alertConfig.message" OnDismissed="async () => { alertConfig.Hide(); if (alertConfig.confirmAction != null) { await alertConfig.confirmAction(); } }"></PopupAlert>
}

@if (!string.IsNullOrEmpty(warningMessage))
{
    <BannerAlert Type="Warning" Message="@warningMessage"></BannerAlert>
}

@foreach (var mod in mods)
{
    string contextID = $"context-menu-{@mod.ModID}";

    <ContextMenu Id="@contextID">
        <Item OnClick="(e) => { TryDeleteMod(mod.ModID); }">Remove from list</Item>
    </ContextMenu>

    <ContextMenuTrigger MenuID="@contextID" CssClass="blazor-context-menu-area">
        <CharacterButton IDName="@mod.ModID" DisplayName="@mod.DisplayName" DisplayImage="@mod.DisplayImageBase64" DisplayColor="@mod.DisplayColor" Icon="@modService.GetModIcon(mod.ModID)" Installed="@modService.IsModInstalled(mod.ModID)" OnClick="@SelectMod"></CharacterButton>
    </ContextMenuTrigger>
}

<label class="character-button no-drop-shadow">
    <input type="file" @ref=inputTypeFileElement @onchange="ReadFile" />
    <img src="img/add-new-mod.svg" class="new" />
</label>

@code {
    [Parameter] public string category { get; set; }

    ElementReference inputTypeFileElement = new ElementReference();

    bool showLoadingIcon = false;
    ConfirmationDialogConfig confirmConfig = null;
    AlertDialogConfig alertConfig = null;

    bool install = false;
    bool requiresReplacement = false;
    ModInstallationData installContext;

    string warningMessage = null;
    string alertMessage = null;

    IEnumerable<BaseModConfiguration> mods = new BaseModConfiguration[] { };

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(modService.Settings.SteamInstallationPath))
            warningMessage = "Steam installation path has not been set, please set this via the settings tab";

        mods = modService.GetModsForCategory(category);
        CheckForUnloadedMods();
    }

    void CheckForUnloadedMods()
    {
        // Don't show if we've already shown
        if (modService.ModLoadWarningShown)
            return;

        var failedModLoads = modService.ModLoadResults.Where(r => !(new[] { ModLoadStatus.Success }.Contains(r.status)));

        if (failedModLoads.Count() > 0)
        {
            ShowAlertDialog(
                title: "Mods Failed to Load",
                message: $"The following mods failed to load (check logs for details): {string.Join(", ", failedModLoads.Select(r => $"{r.modFileName} - {r.status}"))}",
                level: AlertLevel.Warning,
                onClick: async () => { modService.ModLoadWarningShown = true; }
            );
        }
    }

    async Task ReadFile()
    {
        showLoadingIcon = true;

        Tewr.Blazor.FileReader.IFileReference fileReference = null;
        Tewr.Blazor.FileReader.IFileReaderRef fileReader = fileReaderService.CreateReference(inputTypeFileElement);

        foreach (var file in await fileReader.EnumerateFilesAsync())
        {
            fileReference = file;
            break;
        }

        if (fileReference == null)
            return;

        byte[] fileBytes;
        string fileName;

        using (MemoryStream memoryStream = await fileReference.CreateMemoryStreamAsync(4096))
        {
            fileBytes = memoryStream.ToArray();
            fileName = (await fileReference.ReadFileInfoAsync()).Name;
        }

        var result = modService.TryAddMod(fileName, fileBytes);
        string errorMessage = null;

        switch (result)
        {
            case ModLoadStatus.ConfigInvalid:
                errorMessage = "The selected mod is not configured properly. Please check the config.json file (see logs for details)";
                break;
            case ModLoadStatus.DuplicateID:
                errorMessage = "A mod with the same ID has already been added";
                break;
            case ModLoadStatus.ExtensionInvalid:
                errorMessage = "The selected mod is not a mod file";
                break;
            case ModLoadStatus.NoConfig:
                errorMessage = "No config could be found on the selected mod";
                break;
            case ModLoadStatus.UnspecifiedFailure:
                errorMessage = "An error occuring trying to load the selected mod";
                break;
            case ModLoadStatus.UnsupportedVersion:
                errorMessage = "The version number of this mod is not supported by this version of the mod installer";
                break;
        }

        if (!string.IsNullOrEmpty(errorMessage))
        {
            ShowAlertDialog(
                title: "Unable to load mod",
                message: errorMessage,
                level: AlertLevel.Error
            );
        }

        // Make sure to reset this...
        await fileReader.ClearValue();

        mods = modService.GetModsForCategory(category); // We need to show the new list of mods

        showLoadingIcon = false;
    }

    void TryDeleteMod(string modID)
    {
        if (modService.IsModInstalled(modID))
        {
            ShowAlertDialog(
                title: "Can't remove mod",
                message: "This mod is currently installed, and cannot be removed",
                level: AlertLevel.Warning
            );
        }
        else
        {
            ShowConfirmDialog(
                title: "Delete this mod?",
                message: "Are you sure you want to delete this mod?",
                level: AlertLevel.Warning,
                confirmAction: async () => { await DeleteMod(modID); }
            );
        }
    }

    async Task DeleteMod(string modID)
    {
        modService.DeleteMod(modID);
        mods = modService.GetModsForCategory(category);
    }

    void SelectMod(string modID)
    {
        if (string.IsNullOrEmpty(modService.Settings.SteamInstallationPath))
        {
            ShowAlertDialog(
                title: null,
                message: "Steam installation path has not been set, please set this in 'Settings'",
                level: AlertLevel.Info
            );

            return;
        }

        var modData = modService.GetMod(modID);
        install = !modService.IsModInstalled(modID);
        installContext = new ModInstallationData() { ModID = modData.ModID };

        ShowInstallConfirmationDialog();
    }

    void ShowInstallConfirmationDialog()
    {
        ShowConfirmDialog(
            title: GetInstallMessage(),
            message: "This will modify your Disney Infinity 3.0 game installation",
            level: AlertLevel.Warning,
            confirmAction: () => InstallUninstall(installContext)
        );
    }

    void ShowAlertDialog(string title, string message, AlertLevel level, Func<Task> onClick = null)
    {
        alertConfig = new AlertDialogConfig()
        {
            title = title,
            message = message,
            level = level,
            confirmAction = onClick
        };

        alertConfig.Show();
    }

    void ShowConfirmDialog(string title, string message, AlertLevel level, Func<Task> confirmAction)
    {
        confirmConfig = new ConfirmationDialogConfig()
        {
            title = title,
            message = message,
            level = level,
            confirmAction = confirmAction
        };

        confirmConfig.Show();
    }

    async Task InstallUninstall(string selectedCharacterID, ModInstallationData modification, bool ignoreWarnings = false)
    {
        modification.Parameters.Add("ReplacementCharacter", selectedCharacterID);
        await InstallUninstall(modification, ignoreWarnings);
    }

    async Task InstallUninstall(ModInstallationData modification, bool ignoreWarnings = false)
    {
        showLoadingIcon = true;

        ModInstallResult installStatus;

        if (install)
            installStatus = await modService.InstallMod(modification, ignoreWarnings);
        else
            installStatus = await modService.UninstallMod(modification.ModID, ignoreWarnings);

        switch (installStatus.status)
        {
            case InstallationStatus.FatalError:
                ShowAlertDialog(
                    title: "Oops, something went wrong!",
                    message: "Something went wrong during mod installation. All mods have been uninstalled, and your game has been restored",
                    level: AlertLevel.Error
                );
                break;
            case InstallationStatus.RolledBackError:
                ShowAlertDialog(
                    title: "Oops, something went wrong!",
                    message: "Something went wrong during mod installation. The selected mod has not been installed",
                    level: AlertLevel.Error
                );
                break;
            case InstallationStatus.UnresolvableConflict:
                var conflict = installStatus.conflicts.First();
                ShowAlertDialog(
                    title: "Mod conflict detected",
                    message: $"A conflict was detected while installing the mod. The selected mod has not been installed. \nReason: {conflict.description}",
                    level: AlertLevel.Error
                );
                break;
            case InstallationStatus.ResolvableConflict:
                var potentialConflict = installStatus.conflicts.First();
                ShowConfirmDialog(
                    title: $"Potential conflict detected",
                    message: $"The mod being installed has potential conflicts with the following installed mod: {potentialConflict.modID} \nInstall mod anyway?",
                    level: AlertLevel.Warning,
                    confirmAction: () => InstallUninstall(modification, true)
                );
                break;
        }

        showLoadingIcon = false;
    }

    string GetInstallMessage()
    {
        return install ? "Install Mod?" : "Uninstall Mod?";
    }
}